// Class: ImageGUI
// Inherits from: IGui
// Definition: User interface for manipulating images
//
// Duncan Baldwin & Adam Harris
// 01/05/2017
//
// generated by Fast Light User Interface Designer (fluid) version 1.0304

#pragma once
#include "stdafx.h"

#include <memory>

#include <FL\Fl_Widget.H>
#include <FL\Fl_Double_Window.H>
#include <FL\Fl_Box.H>
#include <FL\Fl_Button.H>
#include <Fl\Fl_Input.H>
#include <Fl\Fl_Value_Input.H>

#include "IGui.h"
#include "IView.h"
#include "IEventArgs.h"
#include "IImage.h"

using namespace std;

class ImageGUI : public IGui
{
public:

	// Method: CallBack
	// Definition: Called when a button widget has been clicked
	// Param 1: Fl_Widget* Widg; the widget which has been clicked
	void CallBack(Fl_Widget* Widg);

	// Method: Constructor
	// Definition: Create this class
	// Param 1: shared_ptr<IView> pView; the view using this gui
	ImageGUI(shared_ptr<IView> pView);
	~ImageGUI();

#pragma region IGui_Implementation

	// Method: DataModified
	// Definition: Called when data has been changed
	// Param 1: shared_ptr<IEventArgs>
	void DataModified(shared_ptr<IEventArgs> data);

#pragma endregion

private:

#pragma region Variables

	shared_ptr<IView> mView;

	// DECLARE ints to represent width and height of imageBox, call them 'boxWidth' and 'boxHeight':
	const int minBoxWidth = 500, minBoxHeight = 100;
	int boxWidth = minBoxWidth, boxHeight = minBoxHeight;

	int maxBoxWidth = 1000;
	int maxBoxHeight = 1000;

	// DECLARE ints to represent horizontal padding of topWindow wrt imageBox, call them 'leftPadding' and 'rightPadding':
	int leftPadding = 10, rightPadding = 10;

	// DECLARE ints to represent vertical padding of topWindow wrt imageBox, call them 'upperPadding' and 'lowerPadding':
	int upperPadding = 10, lowerPadding = 130;

	shared_ptr<Fl_Double_Window> window;

	shared_ptr<Fl_Box> ImageBox;

	// Declare 2 buttons, called Load and Save
	shared_ptr<Fl_Button> Load;
	shared_ptr<Fl_Button> Save;

	// Declare 2 buttons, called PreviousImage and NextImage
	shared_ptr<Fl_Button> previousImage;
	shared_ptr<Fl_Button> nextImage;

	// Declare 2 buttons, called RotRight and RotLeft 
	shared_ptr<Fl_Button> RotLeft;
	shared_ptr<Fl_Button> RotRight;

	// Declare 2 buttons, called FlipH and FlipV 
	shared_ptr<Fl_Button> FlipH;
	shared_ptr<Fl_Button> FlipV;

	// Declare 2 buttons, called ScaleUp and ScaleDown 
	shared_ptr<Fl_Button> ScaleUp;
	shared_ptr<Fl_Button> ScaleDown;

	// Declare a value input which will alter the scale of the image, called Scaler
	shared_ptr<Fl_Value_Input> Scaler;
	// Declare a value input which will alter the rotational value of the image, called Rotater
	shared_ptr<Fl_Value_Input> Rotater;

#pragma endregion

#pragma region Methods

	// Method: GetInput
	// Definition: Upon clicking Load, execute this function
	// Param 1: string
	// Return: vector<string>; File locations of images to load
	vector<string> GetInput(string prompt);

	// Method: GetSavePath
	// Definition: Upon clicking save, execute this function, with users input returns a save file location
	// Return: string
	string GetSavePath();

	// Method: Resize
	// Definition: Resize the window and the image box which stores the image
	void Resize();

#pragma endregion
};
